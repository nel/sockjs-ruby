h1. About

_*Disclaimer:* This library is still work in progress._
(It is coming together though)

SockJS is WebSocket emulation library. It means that you use the WebSocket API, only instead of @WebSocket@ class you instantiate @SockJS@ class. I highly recommend to read "SockJS: WebSocket emulation":http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation on the RabbitMQ blog for more info.

h2. Prerequisites

Even though this library uses Rack interface, *An evented webserver is required* like "Thin":http://macournoyer.com/blog/2009/06/04/pusher-and-async-with-thin/, Rainbows or Goliath. 
For Websockets, we use "faye-websocket":http://blog.jcoglan.com/2011/11/28/announcing-faye-websocket-a-standards-compliant-websocket-library gem.

h2. The Client-Side Part

For the client-side part you have to use JS library "sockjs-client":http://sockjs.github.com/sockjs-client which provides WebSocket-like API. Here's an example:

<pre>
<script src="http://cdn.sockjs.org/sockjs-0.3.min.js"></script>

<script>
  var sock = new SockJS("http://mydomain.com/my_prefix");

  sock.onopen = function() {
    console.log("open");
  };

  sock.onmessage = function(e) {
    console.log("message", e.data);
  };

  sock.onclose = function() {
    console.log("close");
  };
</script>
</pre>

h2. The Server-Side Part

Now in order to have someone to talk to, we need to run a server. That's exactly what is sockjs-ruby good for:

<pre>
#!/usr/bin/env ruby

require "thin"
require "rack/sockjs"

# A custom SockJS app
class EchoSession < SockJS::Session
  def process_message(message)
    SockJS.debug "\033[0;31;40m[Echo]\033[0m message: #{message.inspect}, session: #{self.object_id}"
    send(message)
  end
end

# Make it a full rack app
app = Rack::SockJS.new(EchoSession)

# Run it with evented server
EM.run do
  thin = Rack::Handler.get("thin")
  thin.run(app, Port: 8081)
end
</pre>

For more complex example as a middleware check "lib/sockjs/examples/sockjs_apps_for_sockjs_protocol_tests.rb"

h2. SockJS Family

* "SockJS-client":https://github.com/sockjs/sockjs-client JavaScript client library.
* "SockJS-node":https://github.com/sockjs/sockjs-node Node.js server.
* "SockJS-ruby":https://github.com/sockjs/sockjs-ruby Ruby server.
* "SockJS-protocol":https://github.com/sockjs/sockjs-protocol protocol tests and documentation.
* "SockJS-protocol spec":http://sockjs.github.com/sockjs-protocol/sockjs-protocol-0.3.3.html

h1. Development

Get "sockjs-protocol":https://github.com/sockjs/sockjs-protocol (installation information are in its README) and run @rake protocol_test@. Now you can run the tests against it, for convenience it is available as a submodule in /protocol.

h1. Links

* "SockJS: WebSocket emulation":http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation
* "SockJS: web messaging ain't easy":http://www.rabbitmq.com/blog/2011/08/22/sockjs-web-messaging-aint-easy
* "PubSubHuddle Realtime Web talk":http://www.rabbitmq.com/blog/2011/09/26/pubsubhuddle-realtime-web-talk

h1. Contributors

* Judson Lester ( @nyarly )
* Kacper Kawecki ( @kacperk )
